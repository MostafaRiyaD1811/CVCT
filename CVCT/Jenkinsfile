  pipeline {
    agent any
    // options { timestamps() }
    // triggers {
    //   // Use one (or neither) of these:
    //   // pollSCM('H/5 * * * *')               // poll every ~5 minutes
    //   // githubPush()                          // requires GitHub plugin + webhook
    // }
    environment {
      DOTNET_CLI_TELEMETRY_OPTOUT = '1'
      BUILD_Configuration = 'Release'
    }
    stages {

      stage ('Fetch Code') {
            steps {
                git branch: 'master' , url: 'https://github.com/MostafaRiyaD1811/CVCT.git'
            }
        }
      // stage('Checkout') {
      //   steps { checkout scm }
      // }
      stage('Restore') {
        steps { sh 'dotnet restore' }
      }
      stage('Build') {
        steps { sh 'dotnet build --configuration $BUILD_Configuration --no-restore' }
      }
      // stage('Test') {
      //   when { expression { fileExists('**/*Tests*.csproj') } }
      //   steps {
      //     // TRX is fine; archive later. (JUnit requires extra setup)
      //     sh 'dotnet test --configuration $Configuration --no-build --logger "trx;LogFileName=test-results.trx"'
      //   }
      //   post {
      //     always {
      //       archiveArtifacts artifacts: '**/test-results.trx', allowEmptyArchive: true
      //     }
      //   }
      // }
      stage('Publish') {
        steps { sh 'dotnet publish -c $BUILD_Configuration -o artifacts --no-build' }
      }
      
      //stage('Prepare Port') {
      //  steps { sh 'export ASPNETCORE_URLS="http://0.0.0.0:8082"'}
      //}


      //stage('host') {
    //    steps { sh 'export ASPNETCORE_URLS="http://0.0.0.0:8082" && nohup dotnet artifacts/CVCT.dll > /home/mreyad/nohup.out.log 2>&1 &'  }
      //}
    }
    post {
      success {
        archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      }
    }
  }
